/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package energy.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BatteryState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 652695846761305909L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BatteryState\",\"namespace\":\"energy.avro\",\"fields\":[{\"name\":\"charging_source\",\"type\":\"string\"},{\"name\":\"device_id\",\"type\":\"string\"},{\"name\":\"charging\",\"type\":\"int\"},{\"name\":\"current_capacity\",\"type\":\"int\"},{\"name\":\"time_stamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence charging_source;
  @Deprecated public java.lang.CharSequence device_id;
  @Deprecated public int charging;
  @Deprecated public int current_capacity;
  @Deprecated public java.lang.CharSequence time_stamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public BatteryState() {}

  /**
   * All-args constructor.
   */
  public BatteryState(java.lang.CharSequence charging_source, java.lang.CharSequence device_id, java.lang.Integer charging, java.lang.Integer current_capacity, java.lang.CharSequence time_stamp) {
    this.charging_source = charging_source;
    this.device_id = device_id;
    this.charging = charging;
    this.current_capacity = current_capacity;
    this.time_stamp = time_stamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return charging_source;
    case 1: return device_id;
    case 2: return charging;
    case 3: return current_capacity;
    case 4: return time_stamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: charging_source = (java.lang.CharSequence)value$; break;
    case 1: device_id = (java.lang.CharSequence)value$; break;
    case 2: charging = (java.lang.Integer)value$; break;
    case 3: current_capacity = (java.lang.Integer)value$; break;
    case 4: time_stamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'charging_source' field.
   */
  public java.lang.CharSequence getChargingSource() {
    return charging_source;
  }

  /**
   * Sets the value of the 'charging_source' field.
   * @param value the value to set.
   */
  public void setChargingSource(java.lang.CharSequence value) {
    this.charging_source = value;
  }

  /**
   * Gets the value of the 'device_id' field.
   */
  public java.lang.CharSequence getDeviceId() {
    return device_id;
  }

  /**
   * Sets the value of the 'device_id' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.device_id = value;
  }

  /**
   * Gets the value of the 'charging' field.
   */
  public java.lang.Integer getCharging() {
    return charging;
  }

  /**
   * Sets the value of the 'charging' field.
   * @param value the value to set.
   */
  public void setCharging(java.lang.Integer value) {
    this.charging = value;
  }

  /**
   * Gets the value of the 'current_capacity' field.
   */
  public java.lang.Integer getCurrentCapacity() {
    return current_capacity;
  }

  /**
   * Sets the value of the 'current_capacity' field.
   * @param value the value to set.
   */
  public void setCurrentCapacity(java.lang.Integer value) {
    this.current_capacity = value;
  }

  /**
   * Gets the value of the 'time_stamp' field.
   */
  public java.lang.CharSequence getTimeStamp() {
    return time_stamp;
  }

  /**
   * Sets the value of the 'time_stamp' field.
   * @param value the value to set.
   */
  public void setTimeStamp(java.lang.CharSequence value) {
    this.time_stamp = value;
  }

  /**
   * Creates a new BatteryState RecordBuilder.
   * @return A new BatteryState RecordBuilder
   */
  public static energy.avro.BatteryState.Builder newBuilder() {
    return new energy.avro.BatteryState.Builder();
  }
  
  /**
   * Creates a new BatteryState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BatteryState RecordBuilder
   */
  public static energy.avro.BatteryState.Builder newBuilder(energy.avro.BatteryState.Builder other) {
    return new energy.avro.BatteryState.Builder(other);
  }
  
  /**
   * Creates a new BatteryState RecordBuilder by copying an existing BatteryState instance.
   * @param other The existing instance to copy.
   * @return A new BatteryState RecordBuilder
   */
  public static energy.avro.BatteryState.Builder newBuilder(energy.avro.BatteryState other) {
    return new energy.avro.BatteryState.Builder(other);
  }
  
  /**
   * RecordBuilder for BatteryState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BatteryState>
    implements org.apache.avro.data.RecordBuilder<BatteryState> {

    private java.lang.CharSequence charging_source;
    private java.lang.CharSequence device_id;
    private int charging;
    private int current_capacity;
    private java.lang.CharSequence time_stamp;

    /** Creates a new Builder */
    private Builder() {
      super(energy.avro.BatteryState.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(energy.avro.BatteryState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.charging_source)) {
        this.charging_source = data().deepCopy(fields()[0].schema(), other.charging_source);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.device_id)) {
        this.device_id = data().deepCopy(fields()[1].schema(), other.device_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.charging)) {
        this.charging = data().deepCopy(fields()[2].schema(), other.charging);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.current_capacity)) {
        this.current_capacity = data().deepCopy(fields()[3].schema(), other.current_capacity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time_stamp)) {
        this.time_stamp = data().deepCopy(fields()[4].schema(), other.time_stamp);
        fieldSetFlags()[4] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing BatteryState instance
     * @param other The existing instance to copy.
     */
    private Builder(energy.avro.BatteryState other) {
            super(energy.avro.BatteryState.SCHEMA$);
      if (isValidValue(fields()[0], other.charging_source)) {
        this.charging_source = data().deepCopy(fields()[0].schema(), other.charging_source);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.device_id)) {
        this.device_id = data().deepCopy(fields()[1].schema(), other.device_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.charging)) {
        this.charging = data().deepCopy(fields()[2].schema(), other.charging);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.current_capacity)) {
        this.current_capacity = data().deepCopy(fields()[3].schema(), other.current_capacity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.time_stamp)) {
        this.time_stamp = data().deepCopy(fields()[4].schema(), other.time_stamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'charging_source' field.
      * @return The value.
      */
    public java.lang.CharSequence getChargingSource() {
      return charging_source;
    }

    /**
      * Sets the value of the 'charging_source' field.
      * @param value The value of 'charging_source'.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder setChargingSource(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.charging_source = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'charging_source' field has been set.
      * @return True if the 'charging_source' field has been set, false otherwise.
      */
    public boolean hasChargingSource() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'charging_source' field.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder clearChargingSource() {
      charging_source = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'device_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return device_id;
    }

    /**
      * Sets the value of the 'device_id' field.
      * @param value The value of 'device_id'.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.device_id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'device_id' field has been set.
      * @return True if the 'device_id' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'device_id' field.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder clearDeviceId() {
      device_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'charging' field.
      * @return The value.
      */
    public java.lang.Integer getCharging() {
      return charging;
    }

    /**
      * Sets the value of the 'charging' field.
      * @param value The value of 'charging'.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder setCharging(int value) {
      validate(fields()[2], value);
      this.charging = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'charging' field has been set.
      * @return True if the 'charging' field has been set, false otherwise.
      */
    public boolean hasCharging() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'charging' field.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder clearCharging() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'current_capacity' field.
      * @return The value.
      */
    public java.lang.Integer getCurrentCapacity() {
      return current_capacity;
    }

    /**
      * Sets the value of the 'current_capacity' field.
      * @param value The value of 'current_capacity'.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder setCurrentCapacity(int value) {
      validate(fields()[3], value);
      this.current_capacity = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'current_capacity' field has been set.
      * @return True if the 'current_capacity' field has been set, false otherwise.
      */
    public boolean hasCurrentCapacity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'current_capacity' field.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder clearCurrentCapacity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_stamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimeStamp() {
      return time_stamp;
    }

    /**
      * Sets the value of the 'time_stamp' field.
      * @param value The value of 'time_stamp'.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder setTimeStamp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.time_stamp = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'time_stamp' field has been set.
      * @return True if the 'time_stamp' field has been set, false otherwise.
      */
    public boolean hasTimeStamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'time_stamp' field.
      * @return This builder.
      */
    public energy.avro.BatteryState.Builder clearTimeStamp() {
      time_stamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public BatteryState build() {
      try {
        BatteryState record = new BatteryState();
        record.charging_source = fieldSetFlags()[0] ? this.charging_source : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.device_id = fieldSetFlags()[1] ? this.device_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.charging = fieldSetFlags()[2] ? this.charging : (java.lang.Integer) defaultValue(fields()[2]);
        record.current_capacity = fieldSetFlags()[3] ? this.current_capacity : (java.lang.Integer) defaultValue(fields()[3]);
        record.time_stamp = fieldSetFlags()[4] ? this.time_stamp : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
